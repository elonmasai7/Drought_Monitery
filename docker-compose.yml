version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: drought_db
    environment:
      POSTGRES_DB: ${DB_NAME:-drought_warning_db}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-CPqNsBYK}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Redis Cache and Message Broker
  redis:
    image: redis:7-alpine
    container_name: drought_redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-gVriOCoL}
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-gVriOCoL}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Django Web Application
  web:
    build: .
    container_name: drought_web
    environment:
      - DEBUG=False
      - DJANGO_SETTINGS_MODULE=drought_warning_system.settings
      - DB_NAME=${DB_NAME:-drought_warning_db}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-CPqNsBYK}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_INNER_HOST=redis
      - REDIS_INNER_PORT=6379
      - REDISCLI_AUTH=${REDIS_PASSWORD:-gVriOCoL}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1,0.0.0.0}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - WHATSAPP_FROM_NUMBER=${WHATSAPP_FROM_NUMBER}
      - GOOGLE_EARTH_ENGINE_KEY=${GOOGLE_EARTH_ENGINE_KEY}
      - NASA_POWER_API_KEY=${NASA_POWER_API_KEY}
      - OPENWEATHER_API_KEY=${OPENWEATHER_API_KEY}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "8001:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Celery Worker
  celery_worker:
    build: .
    container_name: drought_celery_worker
    command: celery -A drought_warning_system worker --loglevel=info --concurrency=4
    environment:
      - DEBUG=False
      - DJANGO_SETTINGS_MODULE=drought_warning_system.settings
      - DB_NAME=${DB_NAME:-drought_warning_db}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-CPqNsBYK}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_INNER_HOST=redis
      - REDIS_INNER_PORT=6379
      - REDISCLI_AUTH=${REDIS_PASSWORD:-gVriOCoL}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - WHATSAPP_FROM_NUMBER=${WHATSAPP_FROM_NUMBER}
      - GOOGLE_EARTH_ENGINE_KEY=${GOOGLE_EARTH_ENGINE_KEY}
      - NASA_POWER_API_KEY=${NASA_POWER_API_KEY}
      - OPENWEATHER_API_KEY=${OPENWEATHER_API_KEY}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - media_volume:/app/media
    restart: unless-stopped

  # Celery Beat Scheduler
  celery_beat:
    build: .
    container_name: drought_celery_beat
    command: celery -A drought_warning_system beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    environment:
      - DEBUG=False
      - DJANGO_SETTINGS_MODULE=drought_warning_system.settings
      - DB_NAME=${DB_NAME:-drought_warning_db}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-CPqNsBYK}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_INNER_HOST=redis
      - REDIS_INNER_PORT=6379
      - REDISCLI_AUTH=${REDIS_PASSWORD:-gVriOCoL}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      web:
        condition: service_healthy
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: drought_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:

networks:
  default:
    name: drought_warning_network
