# Generated by Django 5.2.7 on 2025-10-04 10:36

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("core", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="DroughtRiskAssessment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("assessment_date", models.DateField()),
                (
                    "risk_score",
                    models.FloatField(
                        help_text="Drought risk score (0-100, higher is more risk)",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "risk_level",
                    models.CharField(
                        choices=[
                            ("very_low", "Very Low"),
                            ("low", "Low"),
                            ("moderate", "Moderate"),
                            ("high", "High"),
                            ("very_high", "Very High"),
                            ("extreme", "Extreme"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "ndvi_component_score",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ]
                    ),
                ),
                (
                    "soil_moisture_component_score",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ]
                    ),
                ),
                (
                    "weather_component_score",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ]
                    ),
                ),
                (
                    "predicted_risk_7_days",
                    models.FloatField(
                        blank=True,
                        help_text="Predicted risk score for 7 days ahead",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "predicted_risk_30_days",
                    models.FloatField(
                        blank=True,
                        help_text="Predicted risk score for 30 days ahead",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("model_version", models.CharField(default="1.0", max_length=20)),
                (
                    "confidence_score",
                    models.FloatField(
                        help_text="Model confidence (0-1)",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                ("recommended_actions", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "region",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="drought_assessments",
                        to="core.region",
                    ),
                ),
            ],
            options={
                "ordering": ["-assessment_date", "region"],
                "unique_together": {("region", "assessment_date")},
            },
        ),
        migrations.CreateModel(
            name="NDVIData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField()),
                (
                    "ndvi_value",
                    models.FloatField(
                        help_text="NDVI value (-1 to 1, higher values indicate healthier vegetation)",
                        validators=[
                            django.core.validators.MinValueValidator(-1.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "satellite_source",
                    models.CharField(default="Landsat-8", max_length=50),
                ),
                (
                    "cloud_cover_percent",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "data_quality",
                    models.CharField(
                        choices=[
                            ("excellent", "Excellent"),
                            ("good", "Good"),
                            ("fair", "Fair"),
                            ("poor", "Poor"),
                        ],
                        default="good",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "region",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ndvi_data",
                        to="core.region",
                    ),
                ),
            ],
            options={
                "ordering": ["-date", "region"],
                "unique_together": {("region", "date", "satellite_source")},
            },
        ),
        migrations.CreateModel(
            name="SoilMoistureData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField()),
                (
                    "moisture_percent",
                    models.FloatField(
                        help_text="Soil moisture percentage (0-100%)",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "soil_depth_cm",
                    models.IntegerField(
                        default=10,
                        help_text="Soil depth in centimeters",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(200),
                        ],
                    ),
                ),
                (
                    "data_source",
                    models.CharField(
                        choices=[
                            ("satellite", "Satellite (SMAP/SMOS)"),
                            ("ground_sensor", "Ground Sensor"),
                            ("model_estimate", "Model Estimate"),
                        ],
                        default="satellite",
                        max_length=50,
                    ),
                ),
                ("temperature_celsius", models.FloatField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "region",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="soil_moisture_data",
                        to="core.region",
                    ),
                ),
            ],
            options={
                "ordering": ["-date", "region"],
                "unique_together": {("region", "date", "soil_depth_cm", "data_source")},
            },
        ),
        migrations.CreateModel(
            name="WeatherData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField()),
                ("temperature_max", models.FloatField(blank=True, null=True)),
                ("temperature_min", models.FloatField(blank=True, null=True)),
                ("temperature_avg", models.FloatField(blank=True, null=True)),
                (
                    "precipitation_mm",
                    models.FloatField(
                        default=0,
                        help_text="Daily precipitation in millimeters",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "humidity_percent",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "wind_speed_kmh",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "evapotranspiration_mm",
                    models.FloatField(
                        blank=True,
                        help_text="Daily evapotranspiration in millimeters",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "data_source",
                    models.CharField(default="OpenWeatherMap", max_length=50),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "region",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="weather_data",
                        to="core.region",
                    ),
                ),
            ],
            options={
                "ordering": ["-date", "region"],
                "unique_together": {("region", "date", "data_source")},
            },
        ),
    ]
